---
// src/pages/intro.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RATIONS - Standard Issue Seasonings</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', monospace;
            background: #0a0a0a;
            color: #00ff00;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            position: fixed;
            width: 100%;
            height: 100%;
        }

        .terminal {
            width: 90%;
            max-width: 900px;
            height: 80vh;
            background: #1a1a1a;
            border: 3px solid #333;
            border-radius: 8px;
            padding: 40px;
            box-shadow: 
                0 0 25px rgba(0, 255, 0, 0.15),
                inset 0 0 25px rgba(0, 0, 0, 0.6);
            position: relative;
            overflow: hidden;
            touch-action: none;
        }

        .terminal::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                repeating-linear-gradient(
                    0deg,
                    transparent,
                    transparent 2px,
                    rgba(0, 255, 0, 0.04) 2px,
                    rgba(0, 255, 0, 0.04) 4px
                );
            pointer-events: none;
        }

        .terminal-content {
            height: 100%;
            overflow: hidden;
            position: relative;
        }

        .typewriter-text {
            font-size: 19px;
            line-height: 1.7;
            white-space: pre-wrap;
            color: #00ff00;
            letter-spacing: 1.2px;
            text-shadow: 0 0 3px rgba(0, 255, 0, 0.3);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            transition: transform 0.1s ease-out;
        }

        .cursor {
            display: inline-block;
            width: 2px;
            height: 21px;
            background: #00ff00;
            animation: blink 1s infinite;
            margin-left: 1px;
            box-shadow: 0 0 4px rgba(0, 255, 0, 0.4);
            vertical-align: baseline;
            position: relative;
            top: 2px;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }

        .skip-hint {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            color: #666;
            font-size: 14px;
            text-align: center;
            opacity: 0.8;
            z-index: 1000;
            background: rgba(0, 0, 0, 0.7);
            padding: 8px 16px;
            border-radius: 4px;
        }

        .website {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 35% 65%, rgba(107, 142, 35, 0.12) 0%, transparent 50%),
                linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            opacity: 0;
            visibility: hidden;
            transition: all 1.2s ease;
            color: #f5f5dc;
            text-align: center;
            z-index: 2000;
        }

        .website.show {
            opacity: 1;
            visibility: visible;
        }

        .logo {
            font-size: 4.2rem;
            font-weight: bold;
            letter-spacing: 10px;
            color: #8FBC8F;
            margin-bottom: 25px;
            text-shadow: 
                3px 3px 0px #2F4F2F,
                6px 6px 12px rgba(0, 0, 0, 0.6);
        }

        .tagline {
            font-size: 1.6rem;
            margin-bottom: 45px;
            color: #d2b48c;
            letter-spacing: 3px;
            text-transform: uppercase;
        }

        .enter-btn {
            background: linear-gradient(135deg, #8FBC8F 0%, #6B8E23 100%);
            color: #1a1a1a;
            border: 2px solid #556B2F;
            padding: 18px 35px;
            font-size: 1.3rem;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            cursor: pointer;
            border-radius: 6px;
            transition: all 0.4s ease;
            letter-spacing: 3px;
            text-transform: uppercase;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
        }

        .enter-btn:hover {
            background: linear-gradient(135deg, #9ACD32 0%, #7BA428 100%);
            transform: translateY(-3px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.5);
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            
            .terminal {
                padding: 25px 20px;
                width: 100%;
                height: 100vh;
                border-radius: 0;
                border: 2px solid #333;
            }
            
            .typewriter-text {
                font-size: 16px;
                line-height: 1.6;
                letter-spacing: 1px;
            }
            
            .cursor {
                height: 18px;
            }
            
            .logo {
                font-size: 3rem;
                letter-spacing: 6px;
            }
            
            .tagline {
                font-size: 1.3rem;
                letter-spacing: 2px;
            }
            
            .enter-btn {
                padding: 15px 25px;
                font-size: 1.1rem;
                letter-spacing: 2px;
            }
        }

        @media (max-width: 480px) {
            .typewriter-text {
                font-size: 14px;
                line-height: 1.5;
            }
            
            .logo {
                font-size: 2.5rem;
                letter-spacing: 4px;
            }
        }
    </style>
</head>
<body>
    <div class="terminal">
        <div class="terminal-content" id="terminal-container">
            <div class="typewriter-text" id="content">
                <span class="cursor" id="cursor"></span>
            </div>
        </div>
    </div>

    <div class="skip-hint">
        Press SPACE or click to skip
    </div>

    <div class="website" id="website">
        <div class="logo">RATIONS</div>
        <div class="tagline">Standard Issue</div>
        <button class="enter-btn" onclick="window.location.href='/supply-depot'">Enter Supply Depot</button>
    </div>

    <script>
        // @ts-nocheck
        const content = document.getElementById('content');
        const cursor = document.getElementById('cursor');
        const terminalContainer = document.getElementById('terminal-container');
        let isSkipped = false;
        let currentIndex = 0;
        let audioContext = null;
        let scrollOffset = 0;

        const text = `> ACCESSING CLASSIFIED TERMINAL...
> LOGIN SUCCESSFUL
> RETRIEVING FILE: PROJECT_FLAVOR.txt

========================================
CONFIDENTIAL - EYES ONLY
========================================

PROJECT: OPERATION FLAVOR SUPERIORITY
DATE: ${new Date().toLocaleDateString()}
CLEARANCE: LEVEL 7

MISSION BRIEF:

For too long, home cooks have been forced to 
use substandard seasonings. Generic blends.
Bland combinations. Flavorless disasters.

NO MORE.

Our research division has spent years perfecting
the ultimate tactical seasoning solution.

BREAKTHROUGH ACHIEVED.

Product: RATIONS SPICE BLEND
Code Name: "STANDARD ISSUE"
Classification: FIELD TESTED âœ“
Deployment Status: AUTHORIZED

CAPABILITIES:
- Transforms any protein instantly
- Elevates vegetables beyond recognition  
- Makes rice actually exciting
- Turns basic meals into memorable experiences
- Compatible with ALL cooking methods

Field testing across 847 kitchens shows:
- 340% improvement in meal satisfaction
- 89% reduction in bland food incidents
- 100% success rate in flavor enhancement

This isn't just seasoning.
This is culinary domination.

Whether you're grilling steaks, roasting chicken,
seasoning vegetables, or cooking pasta...
STANDARD ISSUE delivers tactical flavor superiority.

MISSION PARAMETERS:
Deploy on everything. Leave no meal unseasoned.

CLASSIFICATION: CLASSIFIED
AUTHORIZATION: APPROVED FOR PUBLIC RELEASE

The flavor revolution begins now.

What makes STANDARD ISSUE legendary?

That's still classified.

> TRANSMISSION COMPLETE
> INITIALIZING SUPPLY DEPOT ACCESS...`;

        function initAudio() {
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                console.log('Audio context created:', audioContext.state);
            } catch (e) {
                console.log('Audio not available:', e);
            }
        }

        function ensureAudioContext() {
            if (!audioContext) {
                initAudio();
            }
            if (audioContext && audioContext.state === 'suspended') {
                audioContext.resume().then(() => {
                    console.log('Audio context resumed');
                });
            }
        }

        function playSubtleClick() {
            ensureAudioContext();
            if (!audioContext || audioContext.state !== 'running') return;
            
            try {
                const osc = audioContext.createOscillator();
                const gain = audioContext.createGain();
                
                osc.connect(gain);
                gain.connect(audioContext.destination);
                
                osc.frequency.setValueAtTime(400 + Math.random() * 200, audioContext.currentTime);
                osc.type = 'sine';
                
                gain.gain.setValueAtTime(0, audioContext.currentTime);
                gain.gain.linearRampToValueAtTime(0.05, audioContext.currentTime + 0.01);
                gain.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.08);
                
                osc.start(audioContext.currentTime);
                osc.stop(audioContext.currentTime + 0.08);
            } catch (e) {
                console.log('Click sound failed:', e);
            }
        }

        function playSystemChime() {
            ensureAudioContext();
            if (!audioContext || audioContext.state !== 'running') return;
            
            try {
                const osc = audioContext.createOscillator();
                const gain = audioContext.createGain();
                
                osc.connect(gain);
                gain.connect(audioContext.destination);
                
                osc.frequency.setValueAtTime(500, audioContext.currentTime);
                osc.frequency.linearRampToValueAtTime(600, audioContext.currentTime + 0.1);
                osc.type = 'sine';
                
                gain.gain.setValueAtTime(0, audioContext.currentTime);
                gain.gain.linearRampToValueAtTime(0.06, audioContext.currentTime + 0.02);
                gain.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.15);
                
                osc.start(audioContext.currentTime);
                osc.stop(audioContext.currentTime + 0.15);
            } catch (e) {
                console.log('Chime sound failed:', e);
            }
        }

        function autoScroll() {
            const containerHeight = terminalContainer.clientHeight;
            const contentHeight = content.offsetHeight;
            const cursorPosition = cursor.offsetTop + cursor.offsetHeight;
            
            // Calculate smooth scroll position
            const targetScroll = Math.max(0, cursorPosition - containerHeight + 60);
            
            if (targetScroll > 0) {
                const currentTransform = content.style.transform;
                const currentY = currentTransform ? parseInt(currentTransform.match(/-?\d+/)?.[0] || '0') : 0;
                const newY = -targetScroll;
                
                // Only update if we need to scroll more
                if (Math.abs(newY - currentY) > 5) {
                    content.style.transform = `translateY(${newY}px)`;
                }
            }
        }

        let remainingText = '';

        function type() {
            if (isSkipped || currentIndex >= text.length) {
                finish();
                return;
            }

            const char = text[currentIndex];
            
            // Insert character before cursor
            const textNode = document.createTextNode(char);
            content.insertBefore(textNode, cursor);
            
            // Check if we just finished typing "CLASSIFIED"
            const currentText = getCurrentText();
            if (currentText.endsWith('CLASSIFICATION: CLASSIFIED') && !remainingText) {
                // Store the remaining text to type after correction
                remainingText = text.substring(currentIndex + 1);
                
                // Start correction immediately
                setTimeout(() => {
                    if (!isSkipped) {
                        correctClassificationImmediate();
                    }
                }, 500);
                return;
            }
            
            // Enhanced audio feedback
            if (char === '>') {
                playSystemChime();
            } else if (char !== ' ' && char !== '\n' && char !== '=') {
                playSubtleClick();
            }
            
            // Smooth auto-scroll every character for better experience
            if (currentIndex % 2 === 0) {
                requestAnimationFrame(() => autoScroll());
            }
            
            currentIndex++;
            
            let delay = 30;
            if (char === '\n') delay = 100;
            else if (char === '.' || char === ':' || char === '!') delay = 80;
            else if (char === ' ') delay = 15;
            else if (char === '>') delay = 180;
            
            setTimeout(() => type(), delay + Math.random() * 10);
        }

        function getCurrentText() {
            let textContent = '';
            for (let node of content.childNodes) {
                if (node !== cursor && node.nodeType === Node.TEXT_NODE) {
                    textContent += node.textContent;
                }
            }
            return textContent;
        }

        function finish() {
            if (isSkipped) {
                // Clear content and add all text with DECLASSIFIED correction
                while (content.firstChild && content.firstChild !== cursor) {
                    content.removeChild(content.firstChild);
                }
                const correctedText = text.replace('CLASSIFICATION: CLASSIFIED', 'CLASSIFICATION: DECLASSIFIED');
                const textNode = document.createTextNode(correctedText);
                content.insertBefore(textNode, cursor);
                requestAnimationFrame(() => autoScroll());
            }
            
            // Hide cursor and show website
            cursor.style.display = 'none';
            setTimeout(() => showWebsite(), 2000);
        }

        function correctClassificationImmediate() {
            const currentText = getCurrentText();
            const classifiedIndex = currentText.lastIndexOf('CLASSIFICATION: CLASSIFIED');
            
            if (classifiedIndex === -1) {
                continueTypingRemaining();
                return;
            }
            
            const beforeClassified = currentText.substring(0, classifiedIndex + 'CLASSIFICATION: '.length);
            
            // Start backspacing "CLASSIFIED"
            let backspaceCount = 0;
            const backspaceInterval = setInterval(() => {
                if (backspaceCount >= 10 || isSkipped) { // "CLASSIFIED" is 10 chars
                    clearInterval(backspaceInterval);
                    // Now type "DECLASSIFIED"
                    setTimeout(() => {
                        if (!isSkipped) {
                            typeNewWordImmediate(beforeClassified, 'DECLASSIFIED', 0);
                        }
                    }, 200);
                    return;
                }
                
                const currentWord = 'CLASSIFIED'.substring(0, 10 - backspaceCount - 1);
                // Clear text nodes but keep cursor
                while (content.firstChild && content.firstChild !== cursor) {
                    content.removeChild(content.firstChild);
                }
                const newTextNode = document.createTextNode(beforeClassified + currentWord);
                content.insertBefore(newTextNode, cursor);
                requestAnimationFrame(() => autoScroll());
                backspaceCount++;
            }, 60);
        }

        function typeNewWordImmediate(before, word, charIndex) {
            if (charIndex >= word.length || isSkipped) {
                // Continue typing the remaining text
                setTimeout(() => {
                    if (!isSkipped) {
                        continueTypingRemaining();
                    }
                }, 200);
                return;
            }
            
            const currentWord = word.substring(0, charIndex + 1);
            // Clear text nodes but keep cursor
            while (content.firstChild && content.firstChild !== cursor) {
                content.removeChild(content.firstChild);
            }
            const newTextNode = document.createTextNode(before + currentWord);
            content.insertBefore(newTextNode, cursor);
            playSubtleClick();
            requestAnimationFrame(() => autoScroll());
            
            setTimeout(() => {
                typeNewWordImmediate(before, word, charIndex + 1);
            }, 80);
        }

        function continueTypingRemaining() {
            if (!remainingText || isSkipped) {
                finish();
                return;
            }
            
            // Continue typing character by character from remaining text
            let remainingIndex = 0;
            
            function typeRemainingChar() {
                if (remainingIndex >= remainingText.length || isSkipped) {
                    finish();
                    return;
                }
                
                const char = remainingText[remainingIndex];
                const textNode = document.createTextNode(char);
                content.insertBefore(textNode, cursor);
                
                if (char === '>') {
                    playSystemChime();
                } else if (char !== ' ' && char !== '\n' && char !== '=') {
                    playSubtleClick();
                }
                
                if (remainingIndex % 2 === 0) {
                    requestAnimationFrame(() => autoScroll());
                }
                
                remainingIndex++;
                
                let delay = 30;
                if (char === '\n') delay = 100;
                else if (char === '.' || char === ':' || char === '!') delay = 80;
                else if (char === ' ') delay = 15;
                else if (char === '>') delay = 180;
                
                setTimeout(() => typeRemainingChar(), delay + Math.random() * 10);
            }
            
            typeRemainingChar();
        }

        function showWebsite() {
            document.querySelector('.terminal').style.transform = 'scale(0.85) rotateX(3deg)';
            document.querySelector('.terminal').style.opacity = '0';
            setTimeout(() => {
                document.getElementById('website').classList.add('show');
            }, 500);
        }

        function skip() {
            if (isSkipped) return;
            isSkipped = true;
            finish();
        }

        function handleFirstInteraction() {
            ensureAudioContext();
            skip();
        }

        document.addEventListener('click', handleFirstInteraction);
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                handleFirstInteraction();
            }
        });

        // Prevent manual scrolling
        document.addEventListener('touchmove', (e) => e.preventDefault(), { passive: false });
        document.addEventListener('wheel', (e) => e.preventDefault(), { passive: false });

        window.addEventListener('load', () => {
            setTimeout(() => {
                initAudio();
                type();
            }, 1000);
        });
    </script>
</body>
</html>